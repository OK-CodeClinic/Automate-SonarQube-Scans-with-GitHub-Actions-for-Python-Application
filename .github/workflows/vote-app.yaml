name: Vote App Pipeline to Elastic Beanstalk

on:
  push:
    branches:
      - main

jobs:
  SonarQubeTrigger:
    name: SonarQube Trigger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run sonar-scanner
      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=. \
            -Dsonar.python.version=3.9

  Build-Docker-Image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: SonarQubeTrigger

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ secrets.ECR_REPO }}
          region: ${{ secrets.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: vote-app/Dockerfile 
          context: vote-app/

  Deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: Build-Docker-Image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Create Dockerrun.aws.json file with the ECR image details
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/vote_app:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "5000"
              }
            ]
          }' > Dockerrun.aws.json

          # Zip the Dockerrun.aws.json file
          zip -r deploy.zip Dockerrun.aws.json

          # Upload the zip file to S3
          aws s3 cp deploy.zip s3://my-bucket/deploy.zip

          # Create a new application version in Elastic Beanstalk
          aws elasticbeanstalk create-application-version --application-name vote_app --version-label $GITHUB_SHA --source-bundle S3Bucket=my-bucket,S3Key=deploy.zip

          # Update the Elastic Beanstalk environment to use the new version
          aws elasticbeanstalk update-environment --application-name vote_app --environment-name my-environment --version-label $GITHUB_SHA
