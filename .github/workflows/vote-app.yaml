name: Vote App Pipeline to Elastic Beanstalk

on:
  push:
    branches:
      - main

jobs:
  SonarQubeTrigger:
    name: SonarQube Trigger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=. \
            -Dsonar.python.version=3.9

  Build-Docker-Image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: SonarQubeTrigger

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ secrets.ECR_REPO }}
          region: ${{ secrets.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: vote-app/Dockerfile 
          context: vote-app/

  Deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: Build-Docker-Image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Create Dockerrun.aws.json file
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/vote_app:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "5000"
              }
            ]
          }' > Dockerrun.aws.json

      - name: Zip the Dockerrun.aws.json file
        run: |
          zip -r deploy.zip Dockerrun.aws.json

      - name: Generate unique version tag
        id: version
        run: echo "VERSION_TAG=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Upload the zip file to S3
        env:
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          aws s3 cp deploy.zip s3://vote-beanstalk/deploy-${{ env.VERSION_TAG }}.zip

      - name: Deploy to Elastic Beanstalk
        uses: Amraneze/aws-beanstalk-deploy@master
        with:
          region: ${{ secrets.AWS_REGION }}
          environment_name: Voteapp-env
          application_name: vote_app
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          s3_bucket_name: vote-beanstalk
          s3_file_path: deploy-${{ env.VERSION_TAG }}.zip
          ebs_version_label: ${{ github.run_number }}
          ebs_description: "Deploying version ${{ github.run_number }} of the application"
          ebs_wait_for_env_to_be_green: true
          use_same_version: true
